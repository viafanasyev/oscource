#!/usr/bin/env python2
# -*- coding: utf-8 -*-

from testlib import *

def write_to_qemu_stdin(lines, r):
    if lines:
        line = lines.pop(0)
        r.qemu.proc.stdin.write(line)

def make_runner(*inputs):
    inputs = list(inputs) + ["exit\n"]
    r = Runner(save("jos.out"),
        call_on_monitor_prompt(lambda l: write_to_qemu_stdin(inputs, r)),
        stop_on_line("K> exit"))
    return r

@test(1, "backtrace")
def test_backtrace():
    def get_symbol_address(s):
        global get_symbol_address
        return get_symbol_address(s, symfile="obj/user/backtrace.sym")

    r = make_runner("backtrace\n")
    r.user_test("backtrace", timeout=30)
    r.match(
        "^ *0x[0-9a-f]{16} in first \(char const\* const\* const const_ptr_const_ptr_const_char=0x%08x\) at user/backtrace\.c:\d+" % get_symbol_address("global_str")[0],
        "^ *0x[0-9a-f]{16} in second \(void\* ptr1=0xdeadbeef, void\* ptr2=0xcafebabe\) at user/backtrace\.c:\d+",
        "^ *0x[0-9a-f]{16} in third \(SomeStruct s={ int x = 456; char c = 97; char const\* str = 0x[0-9a-f]{8}; NestedStruct nested = { uint64_t x = 42 } }\) at user/backtrace\.c:\d+",
        "^ *0x[0-9a-f]{16} in fourth \(uint64_t a=123, int b=456, ...\) at user/backtrace\.c:\d+",
    )

@test(1, "print_var globals")
def test_print_var_globals():
    def get_symbol_address(s):
        global get_symbol_address
        return get_symbol_address(s, symfile="obj/user/printvar.sym")

    r = make_runner(
        "print_var global_int\n",
        "print_var global_myint\n",
        "print_var global_uint\n",
        "print_var global_ptr\n",
        "print_var global_void_ptr\n",
    )
    r.user_test("printvar", timeout=30)
    r.match(
        "int64_t global_int = -123",
        "myint global_myint = -456",
        "unsigned int global_uint = 321",
        "int64_t const\* const global_ptr = 0x%08x" % get_symbol_address("global_int")[0],
        "void const\* const global_void_ptr = 0x%08x" % get_symbol_address("global_int")[0],
    )

@test(1, "print_var global_func_ptr")
def test_print_var_global_func_ptr():
    def get_symbol_address(s):
        global get_symbol_address
        return get_symbol_address(s, symfile="obj/user/printvar.sym")

    r = make_runner("print_var global_func_ptr\n")
    r.user_test("printvar", timeout=30)
    r.match("int (int, char)\* global_func_ptr = 0x%08x" % get_symbol_address("some_func")[0])

@test(1, "print_var global_arr")
def test_print_var_global_arr():
    r = make_runner("print_var global_arr\n")
    r.user_test("printvar", timeout=30)
    r.match("int\[3\] global_arr = { 1, 2, 3 }")

@test(1, "print_var global_2arr")
def test_print_var_global_arr():
    r = make_runner("print_var global_2arr\n")
    r.user_test("printvar", timeout=30)
    r.match("int\[3\]\[3\] global_2arr = { 1, 2, 3, 4, 5, 6, 7, 8, 9 }")

@test(1, "print_var global_enum")
def test_print_var_global_enum():
    r = make_runner("print_var global_enum\n")
    r.user_test("printvar", timeout=30)
    r.match("SomeEnum global_enum = 2")

@test(1, "print_var global_struct")
def test_print_var_global_struct():
    r = make_runner("print_var global_struct\n")
    r.user_test("printvar", timeout=10)
    r.match(
        "SomeStruct global_struct = {",
        "\t" + "int x = 456",
        "\t" + "float y = 7.889999866485595703",
        "\t" + "NestedStruct nested = {",
        "\t" + "\t" + "uint64_t x = 42",
        "\t" + "}",
        "}",
    )

@test(1, "print_var global_struct_ptr deref")
def test_print_var_global_struct_ptr_deref():
    r = make_runner("print_var *global_struct_ptr\n")
    r.user_test("printvar", timeout=10)
    r.match(
        "SomeStruct\* \*global_struct_ptr = {",
        "\t" + "int x = 456",
        "\t" + "float y = 7.889999866485595703",
        "\t" + "NestedStruct nested = {",
        "\t" + "\t" + "uint64_t x = 42",
        "\t" + "}",
        "}",
    )

@test(1, "print_var static")
def test_print_var_static():
    r = make_runner("print_var static_var\n")
    r.user_test("printvar", timeout=10)
    r.match("Not found")

@test(1, "print_var local")
def test_print_var_local():
    r = make_runner("print_var local_var\n")
    r.user_test("printvar", timeout=10)
    r.match("Not found")

@test(1, "print_var deref ptr")
def test_print_var_deref_ptr():
    r = make_runner("print_var *global_ptr\n")
    r.user_test("printvar", timeout=30)
    r.match("int64_t const\* const \*global_ptr = -123")

@test(1, "print_var deref non-ptr")
def test_print_var_deref_non_ptr():
    r = make_runner("print_var *global_struct\n")
    r.user_test("printvar", timeout=30)
    r.match("Can't deref type SomeStruct")

run_tests()
